{"version":3,"sources":["data/users/reducers.js","data/posts/reducers.js","data/posts/actionTypes.js","data/comments/reducers.js","data/comments/actionTypes.js","data/rootReducer.js","data/configureStore.js","data/posts/actions.js","services/comments.js","data/comments/actions.js","data/posts/selectors.js","data/comments/selectors.js","data/users/selectors.js","pages/Home/items/ReplyForm.js","pages/Home/items/Reply.js","pages/Home/items/Comment.js","pages/Home/items/CommentList.js","pages/Home/items/CommentForm.js","pages/Home/items/Post.js","pages/Home/index.js","layouts/DefaultLayout.js","App.js","index.js"],"names":["initialState","id","name","profileImageUrl","user","state","action","type","INITIAL_STATE","0","seq","writer","contents","createAt","likes","comments","likesOfMe","1","INITIAL_IDS_STATE","combineReducers","entities","newLikedPost","postId","ids","previewComments","length","replies","Date","now","filter","f","commentId","map","comment","i","replyId","newLikedComment","find","postSeq","commentSeq","history","createBrowserHistory","rootReducer","posts","router","connectRouter","getPosts","likePost","a","localStorage","getItem","undefined","setItem","JSON","stringify","TEMP_COMMENT_DATA","results","parse","fullData","addcomments","getComments","dispatch","apis","then","catch","e","console","log","likeComment","deleteComment","deleteReply","writeComment","writeReply","getCommentsByPost","getCommentsCount","reduce","r","c","getRepliesByPost","getUser","Wrapper","styled","div","ReplyForm","props","useDispatch","useState","setContents","useSelector","selectors","useCallback","actions","onSubmit","preventDefault","placeholder","spellCheck","value","onChange","target","LiWrapper","li","FunctionWrapper","Reply","reply","datetime","moment","fromNow","onClick","UlWrapper","ul","Comment","style","color","key","CommentList","Fragment","CommentForm","ContentsWrapper","NameWrapper","Post","post","commentsCount","src","alt","Home","postsState","useEffect","useMemo","postList","className","DefaultLayout","Component","component","rest","render","matchProps","App","this","path","store","createStore","compose","applyMiddleware","thunk","routerMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.3e28cc21.chunk.js","sourcesContent":["import * as ActionTypes from '../rootActionTypes';\n\nconst initialState = {\n  id: 'sumin',\n  name: '이수민',\n  profileImageUrl: 'https://scontent-ssn1-1.xx.fbcdn.net/v/t31.0-8/20935107_126183028009063_1467195264240257468_o.jpg?_nc_cat=110&_nc_sid=09cbfe&_nc_ohc=H4pYEKc4mcYAX8I8T0q&_nc_oc=AQnA8IRwbfM5ixLlptPQ3O2sRHOukyqGwwTTEp3tTNCIArYyD0fbTk3dVjeAFBXSj8U&_nc_ht=scontent-ssn1-1.xx&oh=24630e746265220f870543bbc778638a&oe=5F452348',\n};\n\nexport default function user(state = initialState, action = {}) {\n  switch (action.type) {\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport * as ActionTypes from '../rootActionTypes';\n\nconst INITIAL_STATE = {\n  0: {\n    seq: 0,\n    writer: {\n      id: 'sumin',\n      name: '이수민',\n      profileImageUrl:\n        'https://scontent-ssn1-1.xx.fbcdn.net/v/t31.0-8/20935107_126183028009063_1467195264240257468_o.jpg?_nc_cat=110&_nc_sid=09cbfe&_nc_ohc=H4pYEKc4mcYAX8I8T0q&_nc_oc=AQnA8IRwbfM5ixLlptPQ3O2sRHOukyqGwwTTEp3tTNCIArYyD0fbTk3dVjeAFBXSj8U&_nc_ht=scontent-ssn1-1.xx&oh=24630e746265220f870543bbc778638a&oe=5F452348',\n    },\n    contents: '클로버추얼패션',\n    createAt: '2020-07-28',\n    likes: 3,\n    comments: 0,\n    likesOfMe: false,\n  },\n  1: {\n    seq: 1,\n    writer: {\n      id: 'hong',\n      name: '홍길동',\n      profileImageUrl:\n        'https://img1.daumcdn.net/thumb/R800x0/?scode=mtistory2&fname=https%3A%2F%2Ft1.daumcdn.net%2Fcfile%2Ftistory%2F2556DA38594B51FE36',\n    },\n    contents: `React, Mobx, Redux 를 사용해 Facebook 댓글 구현하기 (Facebook 웹사이트 참고)`,\n    createAt: '2020-07-21',\n    likes: 1,\n    comments: 0,\n    likesOfMe: false,\n  },\n};\n\nconst INITIAL_IDS_STATE = [0, 1];\n\nfunction entities(state = INITIAL_STATE, action = {}) {\n  switch (action.type) {\n  \n    case ActionTypes.LIKE_POST: {\n      const newLikedPost = { ...state[action.postId] };\n      if(newLikedPost.likesOfMe ){\n        newLikedPost.likes -= 1;\n        newLikedPost.likesOfMe = false;\n      }else{\n        newLikedPost.likes += 1;\n        newLikedPost.likesOfMe = true;\n      }\n      return {\n        ...state,\n        [action.postId]: newLikedPost,\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nfunction ids(state = INITIAL_IDS_STATE, action = {}) {\n  switch (action.type) {\n    case ActionTypes.GET_POSTS:\n      return [...state];\n    default:\n      return state;\n  }\n}\n\nexport default combineReducers({\n  entities,\n  ids,\n});\n","export const GET_POSTS = 'GET_POSTS';\nexport const LIKE_POST = 'LIKE_POST';\n","import * as ActionTypes from '../rootActionTypes';\n\nconst INITIAL_STATE = {\n  \n}\nexport default function comments(state = INITIAL_STATE, action = {}) {\n  switch (action.type) {\n    case ActionTypes.GET_COMMENT_LIST:\n      return action.comments;\n\n    case ActionTypes.GET_COMMENTS:\n      return state[action.postId];\n\n    case ActionTypes.ADD_COMMENT: {\n      const previewComments = state[action.postId] ? state[action.postId] : [];\n      const comments = [\n        ...previewComments,\n        {\n          seq: previewComments.length,\n          contents: action.contents,\n          likes: 0,\n          likesOfMe: false,\n          writer: action.writer,\n          replies: [],\n          createAt: Date.now(),\n        },\n      ];\n\n      return {\n        ...state,\n        [action.postId]: comments,\n      };\n    }\n    case ActionTypes.DELETE_COMMENT: {\n      const comments = state[action.postId].filter((f) => f.seq !== action.commentId);\n\n      return {\n        ...state,\n        [action.postId]: comments,\n      };\n    }\n    case ActionTypes.DELETE_REPLY: {\n      //console.log(action.replyId);\n      const comments = state[action.postId].map((comment, i) => {\n        if (comment.seq == action.commentId) {\n          comment.replies = comment.replies.filter((f) => f.seq !== action.replyId);\n          return comment;\n        } else {\n          return comment;\n        }\n      });\n\n      return {\n        ...state,\n        [action.postId]: comments,\n      };\n    }\n    case ActionTypes.LIKE_COMMENT: {\n      //console.log(action.postId);\n      //console.log(action.commentId);\n      const newLikedComment = state[action.postId].find((f) => f.seq == action.commentId);\n      if (newLikedComment.likesOfMe === false) {\n        newLikedComment.likes += 1;\n        newLikedComment.likesOfMe = true;\n      } else {\n        newLikedComment.likes -= 1;\n        newLikedComment.likesOfMe = false;\n      }\n      const comments = state[action.postId].map((comment, i) => {\n        if (comment.seq == action.commentId) {\n          return newLikedComment;\n        } else {\n          return comment;\n        }\n      });\n      return {\n        ...state,\n        [action.postId]: comments,\n      };\n    }\n    case ActionTypes.ADD_REPLY: {\n      const previewComments = state[action.postId] ? state[action.postId] : [];\n      const comments = previewComments.map((comment, i) => {\n        if (comment.seq == action.commentId) {\n          return {\n            ...comment,\n            replies: [\n              ...comment.replies,\n              {\n                postSeq: action.postId,\n                commentSeq: comment.seq,\n                seq: comment.replies.length,\n                contents: action.contents,\n                likes: 0,\n                likesOfMe: false,\n                writer: action.writer,\n                replies: [],\n                createAt: Date.now(),\n              },\n            ],\n          };\n        } else {\n          return comment;\n        }\n      });\n\n      return {\n        ...state,\n        [action.postId]: comments,\n      };\n    }\n    default:\n      return state;\n  }\n}\n","export const ADD_COMMENT = 'ADD_COMMENT';\nexport const GET_COMMENTS = 'GET_COMMENTS';\nexport const GET_COMMENT_LIST = 'GET_COMMENT_LIST';\nexport const GET_REPLIES = 'GET_REPLIES';\nexport const LIKE_COMMENT = 'LIKE_COMMENT';\nexport const ADD_REPLY = 'ADD_REPLY';\nexport const DELETE_COMMENT = 'DELETE_COMMENT';\nexport const DELETE_REPLY = 'DELETE_REPLY';","import { connectRouter } from 'connected-react-router';\nimport { combineReducers } from 'redux';\nimport user from './users/reducers';\nimport posts from './posts/reducers';\nimport comments from './comments/reducers';\n\nconst createRootReducer = (history) =>\n  combineReducers({\n    comments,\n    posts,\n    router: connectRouter(history),\n    user,\n  });\nexport { createRootReducer };\n","import { applyMiddleware, compose, createStore } from 'redux';\nimport { createBrowserHistory } from 'history';\nimport { routerMiddleware } from 'connected-react-router';\nimport { createRootReducer } from './rootReducer';\nimport thunk from 'redux-thunk';\n\nconst history = createBrowserHistory(); \nconst rootReducer = createRootReducer(history);\n\nexport default function configureStore() {\n  const store = createStore(\n    rootReducer,\n    compose(\n      applyMiddleware(thunk, routerMiddleware(history)),\n      window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__() : (f) => f\n    )\n  );\n\n  return {\n    store,\n    history,\n  };\n}\n","import * as ActionTypes from '../rootActionTypes';\n\nexport function getPosts() {\n  return {\n    type: ActionTypes.GET_POSTS,\n  };\n}\n\nexport function likePost(postId) {\n  return {\n    type: ActionTypes.LIKE_POST,\n    postId,\n  };\n}\n","/**\n * 데이터 불러오기\n */\nexport async function getCommentsApi(user) {\n  //기존데이터 더미데이터 사용\n  if (localStorage.getItem('comments') == null || localStorage.getItem('comments') == undefined) {\n    localStorage.setItem('comments', JSON.stringify(TEMP_COMMENT_DATA));\n  }\n  const results = localStorage.getItem('comments');\n  return JSON.parse(results);\n}\n\n/**\n * 댓글 작성\n */\nexport async function writeCommentApi(postId, contents, user) {\n  const fullData = JSON.parse(localStorage.getItem('comments'));\n  const previewComments = fullData[postId] ? fullData[postId] : [];\n  const addcomments = [\n    ...previewComments,\n    {\n      seq: previewComments.length,\n      contents: contents,\n      likes: 0,\n      likesOfMe: false,\n      writer: user,\n      replies: [],\n      createAt: Date.now(),\n    },\n  ];\n  const results = {\n    ...fullData,\n    [postId]: addcomments,\n  };\n  return localStorage.setItem('comments', JSON.stringify(results));\n}\n\n/**\n * 댓글 삭제\n */\nexport async function deleteCommentApi(postId, commentId) {\n  const fullData = JSON.parse(localStorage.getItem('comments'));\n  const comments = fullData[postId].filter((f) => f.seq !== commentId);\n  const results = {\n    ...fullData,\n    [postId]: comments,\n  };\n  return localStorage.setItem('comments', JSON.stringify(results));\n}\n\n/**\n * 댓글 좋아요/취소\n */\nexport async function likeCommentApi(postId, commentId) {\n  const fullData = JSON.parse(localStorage.getItem('comments'));\n  const newLikedComment = fullData[postId].find((f) => f.seq == commentId);\n  if (newLikedComment.likesOfMe === false) {\n    newLikedComment.likes += 1;\n    newLikedComment.likesOfMe = true;\n  } else {\n    newLikedComment.likes -= 1;\n    newLikedComment.likesOfMe = false;\n  }\n  const comments = fullData[postId].map((comment, i) => {\n    if (comment.seq == commentId) {\n      return newLikedComment;\n    } else {\n      return comment;\n    }\n  });\n  const results = {\n    ...fullData,\n    [postId]: comments,\n  };\n  return localStorage.setItem('comments', JSON.stringify(results));\n}\n\n/**\n * 대댓글 작성\n */\nexport async function writeReplyApi(postId, commentId, contents, user) {\n  const fullData = JSON.parse(localStorage.getItem('comments'));\n  const previewComments = fullData[postId] ? fullData[postId] : [];\n  const comments = previewComments.map((comment, i) => {\n    if (comment.seq == commentId) {\n      return {\n        ...comment,\n        replies: [\n          ...comment.replies,\n          {\n            postSeq: postId,\n            commentSeq: comment.seq,\n            seq: comment.replies.length,\n            contents: contents,\n            likes: 0,\n            likesOfMe: false,\n            writer: user,\n            replies: [],\n            createAt: Date.now(),\n          },\n        ],\n      };\n    } else {\n      return comment;\n    }\n  });\n\n  const results = {\n    ...fullData,\n    [postId]: comments,\n  };\n  return localStorage.setItem('comments', JSON.stringify(results));\n}\n\n/**\n * 대댓글 삭제\n */\nexport async function deleteReplyApi(postId, commentId, replyId) {\n  const fullData = JSON.parse(localStorage.getItem('comments'));\n  const comments = fullData[postId].map((comment, i) => {\n    if (comment.seq == commentId) {\n      comment.replies = comment.replies.filter((f) => f.seq !== replyId);\n      return comment;\n    } else {\n      return comment;\n    }\n  });\n\n  const results = {\n    ...fullData,\n    [postId]: comments,\n  };\n  return localStorage.setItem('comments', JSON.stringify(results));\n}\n\nconst TEMP_COMMENT_DATA = {\n  0: [\n    {\n      seq: 0,\n      writer: {\n        id: 'hong',\n        name: '홍길동',\n        profileImageUrl:\n          'https://img1.daumcdn.net/thumb/R800x0/?scode=mtistory2&fname=https%3A%2F%2Ft1.daumcdn.net%2Fcfile%2Ftistory%2F2556DA38594B51FE36',\n      },\n      contents: `React, Mobx, Redux 를 사용해 Facebook 댓글 구현하기 (Facebook 웹사이트 참고)`,\n      createAt: '2020-07-29',\n      likes: 1,\n      likesOfMe: true,\n      replies: [\n        {\n          seq: 0,\n          postSeq: 0,\n          commentSeq: 0,\n          writer: {\n            id: 'hong',\n            name: '홍길동',\n            profileImageUrl:\n              'https://img1.daumcdn.net/thumb/R800x0/?scode=mtistory2&fname=https%3A%2F%2Ft1.daumcdn.net%2Fcfile%2Ftistory%2F2556DA38594B51FE36',\n          },\n          contents:\n            'React, Mobx, Redux와 같은 Framework, Library를 사용하는 이유와 설계 의의를 이해하고 그에 맞게 코드를 작성할 수 있는가',\n          createAt: '2020-07-30',\n          likes: 3,\n          likesOfMe: true,\n        },\n      ],\n    },\n  ],\n};\n","import * as ActionTypes from '../rootActionTypes';\nimport * as apis from '../../services/comments';\n\nexport const getComments = (user) => (dispatch) => {\n  apis\n    .getCommentsApi(user)\n    .then((comments) =>\n      dispatch({\n        type: ActionTypes.GET_COMMENT_LIST,\n        comments: comments,\n      })\n    )\n    .catch((e) => console.log(e));\n}\n\nexport const likeComment = (postId, commentId) => (dispatch) => {\n  apis\n    .likeCommentApi(postId, commentId)\n    .then(() =>\n      dispatch({\n        type: ActionTypes.LIKE_COMMENT,\n        postId,\n        commentId,\n      })\n    )\n    .catch((e) => console.log(e));\n}\n\nexport const deleteComment = (postId, commentId)  => (dispatch) => {\n  apis\n    .deleteCommentApi(postId, commentId)\n    .then(() =>\n      dispatch({\n        type: ActionTypes.DELETE_COMMENT,\n        postId,\n        commentId,\n      })\n    )\n    .catch((e) => console.log(e));\n}\n\nexport const deleteReply = (postId, commentId, replyId) => (dispatch) => {\n  apis\n    .deleteReplyApi(postId, commentId, replyId)\n    .then(() =>\n      dispatch({\n        type: ActionTypes.DELETE_REPLY,\n        postId,\n        commentId,\n        replyId,\n      })\n    )\n    .catch((e) => console.log(e));\n}\n\n\n\nexport const writeComment = (postId, contents, writer) => (dispatch) => {\n  apis\n    .writeCommentApi(postId, contents, writer)\n    .then(() =>\n      dispatch({\n        type: ActionTypes.ADD_COMMENT,\n        contents,\n        writer,\n        postId,\n      })\n    )\n    .catch((e) => console.log(e));\n}\n\nexport const writeReply = (postId, commentId, contents, writer) => (dispatch) => {\n  apis\n    .writeReplyApi(postId, commentId, contents, writer)\n    .then(() =>\n      dispatch({\n        type: ActionTypes.ADD_REPLY,\n        commentId,\n        writer,\n        contents,\n        postId,\n      })\n    )\n    .catch((e) => console.log(e));\n}\n","export const getPosts = (state) => { return state.posts};\n","export const getComments = (state) => state.comments;\n\nexport const getCommentsByPost = (postSeq) => (state) => state.comments[postSeq] || [];\n\nexport const getCommentsCount = (postId) => (state) => {\n  const comments = state.comments[postId];\n  const count = comments ? comments.reduce((r, c) => r + c.replies.length, comments.length)  : 0;\n  return count;\n};\n\nexport const getRepliesByPost = (commentSeq) => (state) => state.replies[commentSeq] || [];","export const getUser = (state) => state.user;\n","import React, { useState, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as actions from '../../../data/rootActions';\nimport * as selectors from '../../../data/rootSelectors';\nimport styled from 'styled-components';\n\nconst ReplyForm = (props) => {\n  const dispatch = useDispatch();\n\n  //post id, comment id\n  const { postSeq, commentSeq } = props;\n\n  //작성 댓글 state\n  const [contents, setContents] = useState('');\n\n  //my profile data 로드\n  const user = useSelector(selectors.users.getUser);\n\n  const writeReply = useCallback(\n    (postSeq, commentSeq, contents) => {\n      //댓글 작성\n      dispatch(actions.comments.writeReply(postSeq, commentSeq, contents, user));\n    },\n    [user]\n  );\n  const onSubmit = (e) => {\n    e.preventDefault();\n    if (contents == '') return;\n    writeReply(postSeq, commentSeq, contents);\n    setContents('');\n  };\n\n  return (\n    <Wrapper>\n      <form onSubmit={onSubmit}>\n      <input\n        placeholder={'댓글 달기'}\n        spellCheck=\"false\"\n        value={contents}\n        onChange={(e) => setContents(e.target.value)}\n      />\n      </form>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  margin-left: 24px;\n  input {\n    width: 100%;\n    padding: 10px;\n    background-color: #eeeeee;\n    border-radius: 15px;\n    border: 0;\n  }\n`;\n\nexport default ReplyForm;\n","import React from 'react';\nimport moment from 'moment';\nimport ReplyForm from './ReplyForm';\nimport * as actions from '../../../data/rootActions';\nimport * as selectors from '../../../data/rootSelectors';\nimport { useDispatch , useSelector} from 'react-redux';\nimport styled from 'styled-components';\n\nconst Reply = ({ reply , postSeq}) => {\n\n  const { createAt, writer, contents, seq , commentSeq} = reply;\n  const dispatch = useDispatch();\n  const user = useSelector(selectors.users.getUser);\n  const datetime = moment(createAt).fromNow();\n\n  //삭제\n  const deleteHandler = (e) => {\n    e.preventDefault();\n    //console.log(g(`${postSeq} / ${commentSeq} / ${seq}`)\n    dispatch(actions.comments.deleteReply(postSeq, commentSeq, seq));\n  };\n\n  return (\n    <LiWrapper >\n     <Wrapper>\n        <p>{writer.name}</p>\n        <p>{contents}</p>\n      </Wrapper>\n      <FunctionWrapper>\n        {user.id == writer.id && (\n          <button type=\"button\" onClick={deleteHandler} >\n            삭제\n          </button>\n        )}\n        <span>{datetime}</span>\n      </FunctionWrapper>\n    </LiWrapper>\n  );\n};\n\nconst LiWrapper = styled.li`\n  margin-top: 10px;\n`\n\n\nconst Wrapper = styled.div`\n    p{\n      &:first-child{\n        font-weight: bold;\n        margin-bottom: 5px;\n      }\n    }\n    width: 100%;\n    background-color: #eeeeee;\n    padding: 10px;\n    border-radius: 15px;\n    border: 0;\n  \n`;\n//    color: #0057e7;\nconst FunctionWrapper = styled.div`\n  font-size: 13px;\n  font-weight: bold;\n  button{\n    background-color: transparent;\n    border: 0;\n    font-weight: bold;\n    &:last-child{\n      float: right;\n    }\n  }\n  margin-bottom: 12px;\n  span{\n    font-size: 13px;\n    color: gray;\n    margin-left: 6px;\n    &:last-child{\n      font-weight: normal;\n    }\n  }\n` \n\nexport default Reply;\n","import React from 'react';\nimport moment from 'moment';\nimport Reply from './Reply';\nimport * as actions from '../../../data/rootActions';\nimport * as selectors from '../../../data/rootSelectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nconst Comment = ({ comment, postSeq }) => {\n  const dispatch = useDispatch();\n  const user = useSelector(selectors.users.getUser);\n  const { createAt, writer, contents, replies, seq: commentSeq, likesOfMe, likes } = comment;\n\n  const datetime = moment(createAt).fromNow();\n\n  //좋아요\n  const likeHandler = (e) => {\n    e.preventDefault();\n    //console.log(postSeq);\n    dispatch(actions.comments.likeComment(postSeq, commentSeq));\n  };\n\n  //삭제\n  const deleteHandler = (e) => {\n    e.preventDefault();\n    //console.log(postSeq);\n    dispatch(actions.comments.deleteComment(postSeq, commentSeq));\n  };\n\n  return (\n    <LiWrapper >\n      <Wrapper>\n        <p>{writer.name}</p>\n        <p>{contents}</p>\n      </Wrapper>\n      <FunctionWrapper>\n        \n        <button type=\"button\" onClick={likeHandler} style={{color: likesOfMe ? '#0057e7' : 'black'}}>\n          좋아요 {likes} 개\n        </button>\n        <span>\n          댓글 {replies.length} 개\n        </span>\n        {user.id == writer.id && (\n          <button type=\"button\" onClick={deleteHandler} >\n            삭제\n          </button>\n        )}\n        <span>{datetime}</span>\n      </FunctionWrapper>\n\n      <UlWrapper>\n        {replies !== undefined && replies.map((reply) => <Reply key={reply.seq} reply={reply} postSeq={postSeq} />)}\n      </UlWrapper>\n    </LiWrapper>\n  );\n};\n\nconst LiWrapper = styled.li`\n  margin-top: 20px;\n`\n\nconst UlWrapper = styled.ul`\n  padding-left: 24px;\n`\nconst Wrapper = styled.div`\n    p{\n      &:first-child{\n        font-weight: bold;\n        margin-bottom: 5px;\n      }\n    }\n    width: 100%;\n    background-color: #eeeeee;\n    padding: 10px;\n    border-radius: 15px;\n    border: 0;\n  \n`;\n//    color: #0057e7;\nconst FunctionWrapper = styled.div`\n  font-size: 13px;\n  font-weight: bold;\n  button{\n    background-color: transparent;\n    border: 0;\n    font-weight: bold;\n    &:last-child{\n      float: right;\n    }\n  }\n  margin-bottom: 12px;\n  span{\n    font-size: 13px;\n    color: gray;\n    margin-left: 6px;\n    &:last-child{\n      font-weight: normal;\n    }\n  }\n` \nexport default Comment;\n","import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport Comment from './Comment';\nimport * as selectors from '../../../data/rootSelectors';\nimport ReplyForm from './ReplyForm';\n\nconst CommentList = ({ postSeq }) => {\n\n  const comments = useSelector(selectors.comments.getCommentsByPost(postSeq));\n\n  return (\n    <ul>\n      {comments.map((comment, i) => (\n        <React.Fragment key={`comment-${i}`}>\n          <Comment key={comment.seq} postSeq={postSeq} comment={comment} />\n          <ReplyForm postSeq={postSeq} commentSeq={comment.seq} />\n        </React.Fragment>\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentList;\n","import React, { useState, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as actions from '../../../data/rootActions';\nimport * as selectors from '../../../data/rootSelectors';\nimport styled from 'styled-components';\n\nconst CommentForm = (props) => {\n  const dispatch = useDispatch();\n\n  //post id\n  const { postSeq, commentSeq } = props;\n\n  //작성 댓글 state\n  const [contents, setContents] = useState('');\n\n  //my profile data 로드\n  const user = useSelector(selectors.users.getUser);\n\n  const writeComment = useCallback(\n    (postId, contents) => {\n      //댓글 작성\n      dispatch(actions.comments.writeComment(postId, contents, user));\n    },\n    [user]\n  );\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    if (contents == '') return;\n    writeComment(postSeq, contents);\n    setContents('');\n  };\n\n  return (\n    <Wrapper>\n      <form onSubmit={onSubmit}>\n        <input\n          placeholder={'댓글을 입력하세요...'}\n          spellCheck=\"false\"\n          //ref={textareaEl}\n          value={contents}\n          onChange={(e) => setContents(e.target.value)}\n        />\n      </form>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  input {\n    width: 100%;\n    background-color: #F0F2F5;\n    padding: 12px;\n    border-radius: 18px;\n    color: black;\n    font-weight: bold;\n    border: 0;\n  }\n`;\n\nexport default CommentForm;\n","import React from 'react';\nimport classNames from 'classnames';\nimport moment from 'moment';\nimport * as actions from '../../../data/rootActions';\nimport CommentList from './CommentList';\nimport CommentForm from './CommentForm';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport * as selectors from '../../../data/rootSelectors';\n\nconst Post = ({ post }) => {\n\n  const dispatch = useDispatch();\n  \n  //post data state 초기화\n  const {\n    seq,\n    createAt,\n    writer: { name, profileImageUrl, id },\n    contents,\n    likes,\n    likesOfMe,\n  } = post;\n  \n  //comment 갯수 get\n  const commentsCount = useSelector(selectors.comments.getCommentsCount(seq));\n\n  //작성 날짜 표기\n  const datetime = moment(createAt).fromNow();\n\n  //좋아요\n  const likeHandler = (e) => {\n    e.preventDefault();\n    dispatch(actions.posts.likePost(seq));\n  };\n\n  \n\n  return (\n    <Wrapper>\n      <div>\n        <NameWrapper> \n          <img src={profileImageUrl} alt={name}/>\n          <span> {name} </span>\n          <br/>\n          <span> {datetime}</span>\n        </NameWrapper>\n        <ContentsWrapper>\n          <p>{contents}</p>\n          <button type=\"button\" \n            onClick={likeHandler} \n            style={{color: likesOfMe ? '#0057e7 ' : 'black'}}>\n              좋아요 {likes} 개\n          </button>\n          <span>댓글 {commentsCount} 개</span>\n        </ContentsWrapper>\n       </div>\n      <CommentList postSeq={seq} />\n      <CommentForm postSeq={seq} />\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  background-color: white;\n  border-radius: 8px;\n  padding: 16px;\n  margin-bottom: 22px;\n\n`\n\nconst ContentsWrapper = styled.div`\n   p{\n      font-weight: bold;\n      font-size: 20px;\n      margin-top: 11px;\n      margin-bottom: 13px;\n  }\n  span{\n        font-size: 15px;\n        color: gray;\n        float: right;\n  }\n  button{\n    background-color: transparent;\n    border: 0;\n    font-weight: bold;\n    font-size: 15px;\n    span{\n      margin-left: 8px;\n    }\n  }\n  border-bottom: 1px solid #dddddd;\n  padding-bottom: 12px;\n`\n\nconst NameWrapper = styled.div`\n  background-color: white;\n  img{\n    &:first-child{\n      object-fit: cover;\n      width: 40px;\n      height: 41px;\n      border-radius: 20px;\n      margin: 0;\n      padding: 0;\n      float: left;\n      margin-right: 11px;\n    }\n    \n  }\n  span{\n      font-size: 15px;\n      font-weight: bold;\n      &:last-child{\n        font-size: 13px;\n        color: gray;\n        font-weight: normal;\n    }\n  }\n`\nexport default Post;\n","import React, { useEffect, useMemo } from 'react';\nimport Post from './items/Post';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as actions from '../../data/rootActions';\nimport * as selectors from '../../data/rootSelectors';\nimport '../../assets/style/app.css';\n\nconst Home = () => {\n\n  const dispatch = useDispatch();\n  const postsState = useSelector(selectors.posts.getPosts);\n  const user = useSelector(selectors.users.getUser);\n\n  //post data 로드\n  useEffect(() => {\n    dispatch(actions.posts.getPosts());\n    dispatch(actions.comments.getComments(user));\n  }, []);\n\n  const posts = useMemo(() => \n    postsState.ids.map((id) => postsState.entities[id]\n  ),[ postsState.entities, postsState.ids]);\n\n  const postList = useMemo(() => \n    posts.map((post) => <Post key={post.seq} post={post} />\n  ), [posts]);\n  \n  return (\n    <div className=\"container\">\n      {postList}\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Route } from 'react-router-dom';\nimport * as selectors from '../data/rootSelectors';\n\n\nfunction DefaultLayout(props) {\n\n  const { component: Component, ...rest } = props;\n  \n  const dispatch = useDispatch();\n\n\n  useEffect(()=>{\n  },[])\n\n  return (\n    <Route\n      {...rest}\n      render={(matchProps) => (\n        <>\n          <Component {...matchProps} {...rest} />\n        </>\n      )}\n    />\n  );\n}\n\nexport default DefaultLayout;\n","import React, { Component } from 'react';\nimport Home from './pages/Home';\nimport { Switch } from 'react-router-dom';\nimport DefaultLayout from './layouts/DefaultLayout';\nimport { ConnectedRouter } from 'connected-react-router';\nimport './assets/style/app.css';\n\nclass App extends Component {\n  \n  render() {\n    const { history } = this.props;\n\n    return (\n      <ConnectedRouter history={history}>\n        <Switch>\n          <DefaultLayout path=\"/\" component={Home} />\n        </Switch>\n      </ConnectedRouter>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from './data/configureStore';\nimport App from './App';\n\nconst { store, history } = configureStore();\n\nReactDOM.render(\n  <Provider store={store}> \n    <App history={history} />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}